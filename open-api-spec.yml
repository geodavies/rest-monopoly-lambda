openapi: 3.0.0

info:
  version: '1.0.0'
  title: 'REST Monopoly'
  description: 'A RESTful implementation of the Monopoly board game'

paths:
  /games:
    post:
      summary: Create a new game
      operationId: createGame
      tags:
        - Games
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GameRequest'
      responses:
        200:
          description: Game created
          headers:
            Location:
              description: Relative path to the created game
              example: /games/abcdfghijk
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BodyFailedSchemaValidation'
        401:
          description: Unauthorized
        502:
          description: Bad Gateway
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailedToCreateGame'
  /games/{gameId}:
    get:
      summary: Get a game
      operationId: getGame
      tags:
        - Games
      parameters:
        - in: path
          name: gameId
          required: true
          schema:
            type: string
      responses:
        200:
          description: Game retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameIdInvalid'
        401:
          description: Unauthorized
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameNotFound'
        502:
          description: Bad Gateway
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailedToRetrieveGame'
  /games/{gameId}/players:
    get:
      summary: Get all players
      operationId: getPlayers
      tags:
        - Players
      parameters:
        - in: path
          name: gameId
          required: true
          schema:
            type: string
      responses:
        200:
          description: Players retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Player'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameIdInvalid'
        401:
          description: Unauthorized
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameNotFound'
        502:
          description: Bad Gateway
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailedToRetrieveGame'
  /games/{gameId}/players/{playerId}:
    get:
      summary: Get a player
      operationId: getPlayer
      tags:
        - Players
      parameters:
        - in: path
          name: gameId
          required: true
          schema:
            type: string
        - in: path
          name: playerId
          required: true
          schema:
            type: string
      responses:
        200:
          description: Player retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Player'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/GameIdInvalid'
                  - $ref: '#/components/schemas/PlayerIdInvalid'
        401:
          description: Unauthorized
        404:
          description: Not Found
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/GameNotFound'
                  - $ref: '#/components/schemas/PlayerNotFound'
        502:
          description: Bad Gateway
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailedToRetrieveGame'
  /games/{gameId}/titles/properties/{propertyIndex}:
    get:
      summary: Get a property title
      operationId: getProperty
      tags:
        - Titles
      parameters:
        - in: path
          name: gameId
          required: true
          schema:
            type: string
        - in: path
          name: propertyIndex
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Property retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/GameIdInvalid'
                  - $ref: '#/components/schemas/IndexInvalid'
        401:
          description: Unauthorized
        404:
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/GameNotFound'
                  - $ref: '#/components/schemas/PropertyNotFound'
        502:
          description: Bad Gateway
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailedToRetrieveGame'
  /games/{gameId}/titles/utilities/{utilityIndex}:
    get:
      summary: Get a utility title
      operationId: getUtility
      tags:
        - Titles
      parameters:
        - in: path
          name: gameId
          required: true
          schema:
            type: string
        - in: path
          name: utilityIndex
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Utility retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Utility'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/GameIdInvalid'
                  - $ref: '#/components/schemas/IndexInvalid'
        401:
          description: Unauthorized
        404:
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/GameNotFound'
                  - $ref: '#/components/schemas/UtilityNotFound'
        502:
          description: Bad Gateway
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailedToRetrieveGame'
  /games/{gameId}/titles/stations/{stationIndex}:
    get:
      summary: Get a station title
      operationId: getStation
      tags:
        - Titles
      parameters:
        - in: path
          name: gameId
          required: true
          schema:
            type: string
        - in: path
          name: stationIndex
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Station retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Station'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/GameIdInvalid'
                  - $ref: '#/components/schemas/IndexInvalid'
        401:
          description: Unauthorized
        404:
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/GameNotFound'
                  - $ref: '#/components/schemas/StationNotFound'
        502:
          description: Bad Gateway
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailedToRetrieveGame'
  /games/{gameId}/trades:
    get:
      summary: Get all trades
      operationId: getTrades
      tags:
        - Trades
      parameters:
        - in: path
          name: gameId
          required: true
          schema:
            type: string
      responses:
        200:
          description: Trades retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Trade'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameIdInvalid'
        401:
          description: Unauthorized
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameNotFound'
        502:
          description: Bad Gateway
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailedToRetrieveGame'
    post:
      summary: Create a new trade
      operationId: createTrade
      tags:
        - Trades
      parameters:
        - in: path
          name: gameId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TradeRequest'
      responses:
        200:
          description: Trade created
          headers:
            Location:
              description: Relative path to the created trade
              example: /trades/0
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trade'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BodyFailedSchemaValidation'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameNotFound'
        401:
          description: Unauthorized
        502:
          description: Bad Gateway
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailedToCreateTrade'
  /games/{gameId}/trades/{tradeIndex}:
    get:
      summary: Get a trade
      operationId: getTrade
      tags:
        - Trades
      parameters:
        - in: path
          name: gameId
          required: true
          schema:
            type: integer
        - in: path
          name: tradeIndex
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Trade retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trade'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/GameIdInvalid'
                  - $ref: '#/components/schemas/IndexInvalid'
        401:
          description: Unauthorized
        404:
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/GameNotFound'
                  - $ref: '#/components/schemas/TradeNotFound'
        502:
          description: Bad Gateway
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailedToRetrieveGame'
  /games/{gameId}/logs:
    get:
      summary: Get all logs
      operationId: getLogs
      tags:
        - Logs
      parameters:
        - in: path
          name: gameId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Logs retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Logs'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameIdInvalid'
        401:
          description: Unauthorized
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameNotFound'
        502:
          description: Bad Gateway
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailedToRetrieveGame'

components:
  schemas:
    GameRequest:
      required:
        - name
      properties:
        name:
          $ref: '#/components/schemas/GameName'
      additionalProperties: false
    GameName:
      type: string
      minLength: 3
      maxLength: 32
    Game:
      required:
        - id
        - name
        - players
        - titles
        - logs
      properties:
        id:
          $ref: '#/components/schemas/Id'
        name:
          $ref: '#/components/schemas/GameName'
        players:
          type: array
          items:
            $ref: '#/components/schemas/Player'
        titles:
          $ref: '#/components/schemas/Titles'
        logs:
          $ref: '#/components/schemas/Logs'
      additionalProperties: false
    Id:
      type: string
      minLength: 10
      maxLength: 10
    Player:
      required:
        - id
        - name
        - money
        - position
        - rolled
        - turn
        - jail
      properties:
        id:
          $ref: '#/components/schemas/Id'
        name:
          $ref: '#/components/schemas/PlayerName'
        money:
          $ref: '#/components/schemas/Money'
        position:
          type: integer
          minimum: 1
          maximum: 40
        rolled:
          type: boolean
        turn:
          type: boolean
        jail:
          $ref: '#/components/schemas/Jail'
      additionalProperties: false
    PlayerName:
      type: string
      minLength: 3
      maxLength: 32
    Money:
      type: integer
      minimum: 0
      maximum: 9007199254740991
    Jail:
      required:
        - inJail
        - turns
        - getOutOfJailFreeCards
      properties:
        inJail:
          type: boolean
        turns:
          type: integer
          minimum: 0
          maximum: 3
        getOutOfJailFreeCards:
          type: integer
          minimum: 0
          maximum: 2
      additionalProperties: false
    Titles:
      required:
        - properties
        - utilities
        - stations
      properties:
        properties:
          type: array
          minItems: 22
          maxItems: 22
          items:
            $ref: '#/components/schemas/Property'
        utilities:
          type: array
          minItems: 2
          maxItems: 2
          items:
            $ref: '#/components/schemas/Utility'
        stations:
          type: array
          minItems: 4
          maxItems: 4
          items:
            $ref: '#/components/schemas/Station'
      additionalProperties: false
    Title:
      required:
        - name
        - owner
        - mortgaged
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 32
        owner:
          $ref: '#/components/schemas/Id'
        mortgaged:
          type: boolean
      additionalProperties: false
    Property:
      allOf:
        - $ref: '#/components/schemas/Title'
      required:
        - houses
        - hotels
        - rent
        - price
      properties:
        houses:
          type: integer
          minimum: 0
          maximum: 4
        hotels:
          type: integer
          minimum: 0
          maximum: 1
        rent:
          type: array
          minItems: 5
          maxItems: 5
          items:
            type: integer
        price:
          $ref: '#/components/schemas/PriceWithHousesAndHotels'
      additionalProperties: false
    Utility:
      allOf:
        - $ref: '#/components/schemas/Title'
      required:
        - price
      properties:
        price:
          $ref: '#/components/schemas/Price'
      additionalProperties: false
    Station:
      allOf:
        - $ref: '#/components/schemas/Title'
      required:
        - rent
        - price
      properties:
        rent:
          type: array
          items:
            type: integer
            minItems: 4
            maxItems: 4
        price:
          $ref: '#/components/schemas/Price'
      additionalProperties: false
    Price:
      required:
        - purchase
        - mortgage
      properties:
        purchase:
          $ref: '#/components/schemas/Money'
        mortgage:
          $ref: '#/components/schemas/Money'
      additionalProperties: false
    PriceWithHousesAndHotels:
      allOf:
        - $ref: '#/components/schemas/Price'
      required:
        - house
        - hotel
      properties:
        house:
          $ref: '#/components/schemas/Money'
        hotel:
          $ref: '#/components/schemas/Money'
      additionalProperties: false
    Logs:
      type: array
      items:
        type: string
    TradeRequest:
      required:
        - from
        - to
        - requestedItems
        - reciprocalItems
      properties:
        from:
          $ref: '#/components/schemas/Id'
        to:
          $ref: '#/components/schemas/Id'
        requestedItems:
          $ref: '#/components/schemas/TradeItems'
        reciprocalItems:
          $ref: '#/components/schemas/TradeItems'
    TradeItems:
      required:
        - money
        - titles
      properties:
        money:
          $ref: '#/components/schemas/Money'
        titles:
          $ref: '#/components/schemas/TradeTitles'
      additionalProperties: false
    TradeTitles:
      required:
        - properties
        - stations
        - utilities
      properties:
        properties:
          type: array
          items:
            type: integer
            minimum: 0
            maximum: 21
        stations:
          type: array
          items:
            type: integer
            minimum: 0
            maximum: 3
        utilities:
          type: array
          items:
            type: integer
            minimum: 0
            maximum: 1
      additionalProperties: false
    Trade:
      allOf:
        - $ref: '#/components/schemas/TradeRequest'
      required:
        - open
        - accepted
      properties:
        open:
          type: boolean
        accepted:
          type: boolean
      additionalProperties: false
    GameIdInvalid:
      required:
        - reason
      properties:
        reason:
          type: enum
          enum: ['Game ID is invalid']
    PlayerIdInvalid:
      required:
        - reason
      properties:
        reason:
          type: enum
          enum: ['Player ID is invalid']
    IndexInvalid:
      required:
        - reason
      properties:
        reason:
          type: enum
          enum: ['The index is not a valid positive integer']
    GameNotFound:
      required:
        - reason
      properties:
        reason:
          type: enum
          enum: ['Game not found']
    PlayerNotFound:
      required:
        - reason
      properties:
        reason:
          type: enum
          enum: ['Player not found']
    PropertyNotFound:
      required:
        - reason
      properties:
        reason:
          type: enum
          enum: ['Property not found']
    UtilityNotFound:
      required:
        - reason
      properties:
        reason:
          type: enum
          enum: ['Utility not found']
    StationNotFound:
      required:
        - reason
      properties:
        reason:
          type: enum
          enum: ['Station not found']
    TradeNotFound:
      required:
        - reason
      properties:
        reason:
          type: enum
          enum: ['Trade not found']
    FailedToRetrieveGame:
      required:
        - reason
      properties:
        reason:
          type: enum
          enum: ['Failed to retrieve game']
    FailedToCreateGame:
      required:
        - reason
      properties:
        reason:
          type: enum
          enum: ['Failed to create game']
    FailedToCreateTrade:
      required:
        - reason
      properties:
        reason:
          type: enum
          enum: ['Failed to create trade']
    BodyFailedSchemaValidation:
      required:
        - reason
      properties:
        reason:
          type: enum
          enum: ['Body failed schema validation']
