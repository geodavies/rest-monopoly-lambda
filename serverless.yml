service: rest-monopoly-lambda

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  environment:
    DYNAMODB_GAME_TABLE: ${self:service}-${opt:stage, self:provider.stage}-Games

functions:
  postGame:
    handler: src/main/handlers/games/post.game
    events:
      - http:
          path: /games
          method: post
  getGame:
    handler: src/main/handlers/games/get.game
    events:
      - http:
          path: /games/{gameId}
          method: get
          request:
            parameters:
              paths:
                gameId: true
  getPlayers:
    handler: src/main/handlers/players/get.players
    events:
      - http:
          path: /games/{gameId}/players
          method: get
          request:
            parameters:
              paths:
                gameId: true
  getPlayer:
    handler: src/main/handlers/players/get.player
    events:
      - http:
          path: /games/{gameId}/players/{playerId}
          method: get
          request:
            parameters:
              paths:
                gameId: true
                playerId: true
  getLogs:
    handler: src/main/handlers/logs/get.logs
    events:
      - http:
          path: /games/{gameId}/logs
          method: get
          request:
            parameters:
              paths:
                gameId: true
  getTrades:
    handler: src/main/handlers/trades/get.trades
    events:
      - http:
          path: /games/{gameId}/trades
          method: get
          request:
            parameters:
              paths:
                gameId: true
  getTrade:
    handler: src/main/handlers/trades/get.trade
    events:
      - http:
          path: /games/{gameId}/trades/{tradeId}
          method: get
          request:
            parameters:
              paths:
                gameId: true
                tradeId: true
  getProperty:
    handler: src/main/handlers/titles/get.property
    events:
      - http:
          path: /games/{gameId}/titles/properties/{propertyIndex}
          method: get
          request:
            parameters:
              paths:
                gameId: true
                propertyIndex: true
  getStation:
    handler: src/main/handlers/titles/get.station
    events:
      - http:
          path: /games/{gameId}/titles/stations/{stationIndex}
          method: get
          request:
            parameters:
              paths:
                gameId: true
                stationIndex: true
  getUtility:
    handler: src/main/handlers/titles/get.utility
    events:
      - http:
          path: /games/{gameId}/titles/utilities/{utilityIndex}
          method: get
          request:
            parameters:
              paths:
                gameId: true
                utilityindex: true

resources:
  Resources:
    GamesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${opt:stage, self:provider.stage}-Games
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

plugins:
  - serverless-dynamodb-local
  - serverless-offline

custom:
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
